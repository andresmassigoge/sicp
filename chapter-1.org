* 1.1

  Below is a sequence of expressions. What is the result printed by the
  interpreter in response to each expression? Assume that the sequence is to be
  evaluated in the order in which it is presented.

  #+BEGIN_SRC clojure
    10                                      ; 10
    (+ 5 3 4)                               ; 12
    (- 9 1)                                 ; 8
    (/ 6 2)                                 ; 3
    (+ (* 2 4) (- 4 6))                     ; 6
    (def a 3)                               ; 3
    (def b (+ a 1))                         ; 4
    (+ a b (* a b))                         ; 19
    (= a b)                                 ; false
    (if (and (> b a) (< b (* a b)))
        b
        a)                                  ; 4
    (cond ((= a 4) 6)
          ((= b 4) (+ 6 7 a))
          (:else 25))                       ; 16
    (+ 2 (if (> b a) b a))                  ; 6
    (* (cond ((> a b) a)
             ((< a b) b)
             (:else -1))
       (+ a 1))                             ; 16
  #+END_SRC

* 1.2

  #+BEGIN_SRC clojure
    (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
       (* 3 (- 6 2) (- 2 7)))
  #+END_SRC

* 1.3

  Define a procedure that takes three numbers as arguments and returns the sum
  of the squares of the two larger numbers.

  #+BEGIN_SRC clojure
    (defn square [x] (* x x))

    (defn sum-of-squares [x y]
      (+ (square x) (square y)))

    (defn sum-of-squares-of-largest-two [x y z]
      (apply sum-of-squares
             (take 2 (reverse (sort [x y z])))))
  #+END_SRC

* 1.4

  Observe that our model of evaluation allows for combinations whose operators
  are compound expressions. Use this observation to describe the behavior of
  the following procedure:

  #+BEGIN_SRC clojure
    (define (a-plus-abs-b a b)
      ((if (> b 0) + -) a b))
  #+END_SRC

  In this method, the operator is defined as the compound expression

  #+BEGIN_SRC clojure
  (if (> b 0) + -)
  #+END_SRC

  Depending on the result of this form, we will either add or subtract a from
  b.  In practice, this means that this function always adds the absolute value
  of b to a.

* 1.5

  Ben Bitdiddle has invented a test to determine whether the interpreter he is
  faced with is using applicative-order evaluation or normal-order
  evaluation. He defines the following two procedures:

  #+BEGIN_SRC clojure
    (define (p) (p))

    (define (test x y)
      (if (= x 0)
        0
        y))
  #+END_SRC

  Then he evaluates the expression

  #+BEGIN_SRC clojure
    (test 0 (p))
  #+END_SRC

  What behavior will Ben observe with an interpreter that uses
  applicative-order evaluation? What behavior will he observe with an
  interpreter that uses normal-order evaluation? Explain your answer. (Assume
  that the evaluation rule for the special form if is the same whether the
  interpreter is using normal or applicative order: The predicate expression is
  evaluated first, and the result determines whether to evaluate the consequent
  or the alternative expression.)

  Normal order evaluation only tries to evaluate a form when it is needed.
  Since 0 is passed as the first argument to test, the if condition will
  evaluate to true, causing the function to immediately return 0.

  In applicative-order evaluation, forms are evaluated early on to avoid
  recalculation.  Since the special form

  #+BEGIN_SRC clojure
    (define p (p))
  #+END_SRC

  Is recursive, and p is passed into p, evaluating

  #+BEGIN_SRC clojure
    (test 0 (p))
  #+END_SRC

  will cause the program to never terminate.

* 1.6

  Alyssa P. Hacker doesn't see why if needs to be provided as a special
  form. ``Why can't I just define it as an ordinary procedure in terms of
  cond?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done,
  and she defines a new version of if:

  #+BEGIN_SRC clojure
    (define (new-if predicate then-clause else-clause)
      (cond (predicate then-clause)
            (else else-clause)))
  #+END_SRC

  Eva demonstrates the program for Alyssa:

  #+BEGIN_SRC clojure
    (new-if (= 2 3) 0 5)                    ; 5
    (new-if (= 1 1) 0 5)                    ; 0
  #+END_SRC

  Delighted, Alyssa uses new-if to rewrite the square-root program:

  #+BEGIN_SRC clojure
    (define (sqrt-iter guess x)
      (new-if (good-enough? guess x)
              guess
              (sqrt-iter (improve guess x)
                         x)))
  #+END_SRC

  What happens when Alyssa attempts to use this to compute square roots?
  Explain.

  The special form if does not use applicative-order evaluation, which means
  the else clause isn't evaluated until the interpreter deems it necessary.
  This new-if method has no such property as it is user defined.  This means
  the else clause will be called every time the new-if method is called,
  leading to infinite recursion.

* 1.7

  The good-enough? test used in computing square roots will not be very
  effective for finding the square roots of very small numbers. Also, in real
  computers, arithmetic operations are almost always performed with limited
  precision. This makes our test inadequate for very large numbers. Explain
  these statements, with examples showing how the test fails for small and
  large numbers. An alternative strategy for implementing good-enough? is to
  watch how guess changes from one iteration to the next and to stop when the
  change is a very small fraction of the guess. Design a square-root procedure
  that uses this kind of end test. Does this work better for small and large
  numbers?

  For small numbers, the limited tolerance offers insufficient resolution.  We
  stop doing further calculations much sooner than we should, leading to
  incorrect answers.

  For larger numbers, we lose continually lose floating-point precision.  This
  because a problem because for some arbitrarily large guess, we cannot pin
  down an answer within our given tolerance, leading to infinite recursion.

  #+BEGIN_SRC clojure
    (defn square [x] (* x x))

    (defn average [x y]
      (/ (+ x y)
         2))

    (defn good-enough? [guess previous-guess]
      (< (abs (- guess previous-guess))
         0.001))

    (defn improve [guess x]
      (average guess
               (/ x guess)))

    (defn sqrt-iter [guess previous-guess x]
      (if (good-enough? guess previous-guess)
        guess
        (sqrt-iter (improve guess x)
                   guess
                   x)))

    (defn sqrt [x]
      (sqrt-iter 1.0 0 x))
  #+END_SRC
